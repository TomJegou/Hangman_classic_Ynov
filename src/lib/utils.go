package lib

import (
	"fmt"
	"math/rand"
	"os"
	"sort"
	"time"
)

/*
Function that clears the terminal output
We use the ANSI Escape Sequences
*/

func ClearConsole() {
	fmt.Print("\033[H\033[2J") // the \033[h is used to move the cursor to the 0 0 positon and \033[j to clear the terminal
}

/*
Function used to calculate the number of lines between each char
in order to used different type of policies with different format
We just count the number of line the first char of the file which
is the char space.
*/

func CalculateLinesbtwChar(pathtofile string) int {
	countLine := 1
	sliceLines := GetFileLineInSlice(pathtofile)
	for i := 1; i < len(sliceLines); i++ {
		countChar := 0                            //count the number of spaces in a line, if the number is greater than 0 it's ok
		for j := 0; j < len(sliceLines[i]); j++ { //looping into the line to chech every char in it
			if string(sliceLines[i][j]) == " " {
				countChar++
			}
			if string(sliceLines[i][j]) != " " { // if there is something else than a space, it means that we are in the other char
				return countLine
			}
		}
		if countChar == 0 {
			return countLine
		}
		countLine++
	}
	return countLine
}

/*
Check if the letter parameter is twice in a string table t,
if yes it returns true and the table otherwhise it append the letter in t and returns false
*/

func Checktwice(letter string, t []string) ([]string, bool) {
	if IsIn(t, letter) {
		return t, true
	}
	t = append(t, letter)
	return t, false
}

/*
Function that returns a random word from a string table dic
*/

func ChoseRandomWord(dic []string) string {
	return dic[rand.New(rand.NewSource(time.Now().UnixNano())).Intn(len(dic))] // index number generated by the function rand using time as a seed and ranged between 0 and dic's length
}

/*
Fuction used to change the "_" to the corresponding letter from the word to guess
*/

func DiscoverLetter(t []byte, letter string, word string) {
	for i := 0; i < len(word); i++ {
		if string(word[i]) == letter {
			t[i] = word[i]
		}
	}
}

/*
Here we check if the letter is in the slice of strings
for the lenght of the tab  if the string of tab of i equal the string it return true else false
*/

func IsIn(t []string, s string) bool {
	for i := 0; i < len(t); i++ {
		if string(t[i]) == s {
			return true
		}
	}
	return false
}

/*
Function that list a map in a key ascending order and also return all the keys of the map
*/

func Listmap(m map[string]string) []string {
	keys := []string{}
	for key := range m {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	for index_key, key := range keys {
		PrintColor("["+key+"]"+": "+m[keys[index_key]]+"\n", "White")
	}
	return keys
}

/*
Function used to return a string table of all undiscovered letters
*/

func RemainingLetter(t []byte, completeWord string) []string {
	result := []string{}
	for i := 0; i < len(t); i++ {
		if !IsIn(result, string(t[i])) && string(t[i]) == "_" && !IsIn(result, string(completeWord[i])) {
			result = append(result, string(completeWord[i]))
		}
	}
	return result
}

/*
Function that scans a directory and return a map of all file's names in the dir as the value and an index as key
*/

func Scandir(pathdir string) map[string]string {
	data := map[string]string{}
	files, err := os.ReadDir(pathdir)
	if err != nil {
		PrintColor("Dictionnary Error", "Red")
	}
	for i := 0; i < len(files); i++ {
		data[string(byte(i+49))] = files[i].Name()[:len(files[i].Name())-4] // only add the name of the file without the .txt
	}
	return data
}

// art from http://www.ascii-art.de/ascii/s/stickman.txt and https://ascii.co.uk/art/hangman
func EasterEgg(filename string) {
	file := GetFileLineInSlice("../Templates/.foreasteregg/" + filename + ".txt")
	for i := 0; i < len(file); i++ {
		PrintColor(file[i]+"\n", "White")
	}
}
